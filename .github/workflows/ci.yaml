name: CI Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          pip install -r requirements.txt
      - name: run pipline
        env: 
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: dvc repro

      - name: Run tests
        env: 
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python -m unittest tests/test_flask_app.py

      - name: Login to AWS ECR 
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 496637883626.dkr.ecr.us-east-1.amazonaws.com

      - name: Build the docker image
        run: |
          docker build -t mayur_ecr6 .

      - name: Tag the docker image
        run: |
          docker tag mayur_ecr:latest 496637883626.dkr.ecr.us-east-1.amazonaws.com/mayur_ecr6:latest

      - name: Push the image AWS ECR
        run: |
          docker push 496637883626.dkr.ecr.us-east-1.amazonaws.com/mayur_ecr6:latest

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh
       #Upload the ZIP file to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://codedeploybucketmayur/deployment.zip
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name MyDockerApp2 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name MyDeploymentGroup1 \
            --s3-location bucket=codedeploybucketmayur,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region us-east-1

     




      # - name: Deploy to EC2
      #   if: success()
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       aws configure set default.region us-east-1
      #       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 496637883626.dkr.ecr.us-east-1.amazonaws.com
      #       docker pull 496637883626.dkr.ecr.us-east-1.amazonaws.com/mayur_ecr:latest
      #       # docker stop mayur-app || true
      #       # docker rm mayur-app || true
      #       docker run -d -p 80:5000 -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} --name mayur-app 496637883626.dkr.ecr.us-east-1.amazonaws.com/mayur_ecr:latest



      # - name: Log in to Docker Hub
      #   if: success()
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} 

      # - name: Build Docker Image
      #   if: success()
      #   run: 
      #     docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest .

      # - name: Push Docker image to docker Hub
      #   if: success()
      #   run: |
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest

      # - name: Deploy to EC2
      #   if: success()
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest
      #       # docker stop my-app || true
      #       # docker rm my-app || true
      #       docker run -p 80:5000 \
      #        --name my-app \
      #       -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} \
      #       ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest

      

      


